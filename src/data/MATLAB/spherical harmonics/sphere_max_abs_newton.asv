function [g, omega] = sphere_max_abs_newton(fnm, omega0, tol, maxIter, isComplex)
arguments
    fnm (:,1) double
    omega0 (1,2) double
    tol (1,1) double {mustBePositive, mustBeFinite} = 2*pi*1e-6;
    maxIter (1,1) double {mustBeInteger, mustBePositive} = 10;
    isComplex (1,1) logical = true
end

N = ceil(sqrt(size(fnm,1))-1);
fnm( end:(N+1)^2 ) = 0;
omega = nan(maxIter, 2);
omega(1,:) = omega0;
g = nan(maxIter,1);

for i=1:maxIter
    Y = shmat(N, omega(i,:), isComplex, false);
    f = Y*fnm;
    grad_Y = shgrad(omega(i,:), N, isComplex, Y);
    grad_f = grad_Y*fnm;
    H_Y = shhessian(omega(i,:), N, isComplex, Y, grad_Y);
    H_f = sum( H_Y .* reshape(fnm, 1, 1, []), 3);
    
    g(i) = abssq(f);
    grad_g = 2*( real(f)*real(grad_f) + imag(f)*imag(grad_f) );
    H_g = 2*( real(grad_f)*real(grad_f)' + real(f)*real(H_f) + ...
              imag(grad_f)*imag(grad_f)' + imag(f)*imag(H_f) );
   
    grad_z = grad_g / g(i);
    H_z = H_g / g(i) - ( grad_g * grad_g' / g(i)^2 );
    if ~(trace(H_z)<0 && det(H_z)>0)
        warning('Hessian not negative definite');
    end
    domega = H_z \ grad_z;
    omega(i+1,:) = omega(i,:) + domega.';
    if angle_between(omega(i,:), omega(i+1,:)) <= tol
        break
    end
end
omega = omega(1:i+1,:);
Y = shmat(N, omega(i+1,:), isComplex, false);
f = Y*fnm;
g(i+1) = abssq(f);
g = g(1:i+1,:);

plotFlag = true;
if plotFlag
    figure;
    hammer.surf([],fnm, @abssq);
    hold on;
    hammer.plot(omega(:,1), omega(:,2), 'r.-');
end
end

